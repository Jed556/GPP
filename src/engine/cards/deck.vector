#include "../cards.h"

/**
 * @brief Construct a new Deck object
 */
Deck::Deck() {
    size = suits.size() * faces.size();
    cards.reserve(size);
    for (const std::string& suit : suits) {
        for (const std::string& face : faces) {
            cards.push_back(suit + face);
        }
    }
    shuffle();
}

/**
 * @brief Free memory allocated for cards on deck
 */
Deck::~Deck() {}

/**
 * @brief Change or add card into deck
 *
 * @param index Position of card on deck (vector index)
 * @param value Value of the card
 */
void Deck::setCard(int index, std::string value) {
    if (index < 0 || index >= size) {
        throw std::out_of_range("Index out of bounds");
    }
    cards[index] = value;
}

/**
 * @brief Set card in index to null
 *
 * @param index Position of card on deck (vector index)
 */
void Deck::setNull(int index) {
    if (index < 0 || index >= size) {
        throw std::out_of_range("Index out of bounds");
    }
    cards[index] = "";
}

/**
 * @brief Get a card from deck
 *
 * @param index Position of card on deck (vector index)
 * @return std::string Card from deck
 */
std::string Deck::getCard(int index) const {
    if (index < 0 || index >= size) {
        throw std::out_of_range("Index out of bounds");
    }
    return cards[index];
}

/**
 * @brief Get all cards on deck
 *
 * @return std::vector<std::string> All cards on deck
 */
std::vector<std::string> Deck::getDeck() const {
    return cards;
}

/**
 * @brief Get the populated size of the deck
 *
 * @return int Size of the deck
 */
int Deck::getDeckSize() const {
    int deckSize = 0;  // Small PP
    while (cards[deckSize] != "") deckSize++;

    return deckSize;
}

/**
 * @brief Get maximum card slots on hand
 *
 * @return unsigned int Max card slots (vector size)
 */
size_t Deck::getSize() const {
    return suits.size() * faces.size();
}

/**
 * @brief Shuffle all cards on deck
 *
 */
void Deck::shuffle() {
    std::random_device rd;
    std::mt19937 g(rd());

    std::shuffle(cards.begin(), cards.end(), g);
}

/**
 * @brief Get a formatted string of all cards on deck (optional: print to console)
 *
 * @param print Whether to print to console or not
 * @return std::string All cards on deck (formatted string)
 */
std::string Deck::printCards(bool print) const {
    std::string output = "";
    for (const auto& card : cards) {
        if (card != "") {
            output += "| " + card + " ";
        }
    }
    output += "|";
    if (print) {
        std::cout << output << std::endl;
    }
    return output;
}